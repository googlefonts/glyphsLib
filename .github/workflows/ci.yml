name: Test + Deploy

on:
  push:
    branches: [main]
    tags: ["v*.*.*"]
  pull_request:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    - name: Install dependencies
      run: pip install tox
    - name: Run style and typing checks
      run: tox -e lint
  test:
    runs-on: ${{ matrix.platform }}
    strategy:
      matrix:
        python-version: ["3.10", "3.8"]
        platform: [ubuntu-latest, windows-latest]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: pip install tox coverage
    - name: Test with tox
      run: tox -e py
    - name: Produce coverage files
      run: |
        coverage combine
        coverage xml
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        # see https://github.com/codecov/codecov-action/issues/557
        token: ${{ secrets.CODECOV_TOKEN }}
  deploy:
    # only run if the commit is tagged...
    if: startsWith(github.ref, 'refs/tags/v')
    # ... and both the lint and test jobs completed successfully
    needs:
      - lint
      - test
    runs-on: ubuntu-latest
    # This is required to create a release using Github integration token
    # https://github.com/softprops/action-gh-release?tab=readme-ov-file#permissions
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v3
      with:
        # setuptools_scm requires the git clone to not be 'shallow'
        fetch-depth: 0
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.x"
    - name: Extract release notes from annotated tag message
      id: release_notes
      env:
        # e.g. v0.1.0a1, v1.2.0b2 or v2.3.0rc3, but not v1.0.0
        PRERELEASE_TAG_PATTERN: "v[[:digit:]]+\\.[[:digit:]]+\\.[[:digit:]]+([ab]|rc)[[:digit:]]+"
      run: |
        # GH checkout action doesn't preserve tag annotations, we must fetch them
        # https://github.com/actions/checkout/issues/290
        git fetch --tags --force
        # strip leading 'refs/tags/' to get the tag name
        TAG_NAME="${GITHUB_REF##*/}"
        # Dump tag message to temporary .md file (excluding the PGP signature at the bottom)
        TAG_MESSAGE=$(git tag -l --format='%(contents)' $TAG_NAME | sed -n '/-----BEGIN PGP SIGNATURE-----/q;p')
        echo "$TAG_MESSAGE" > "${{ runner.temp }}/release_notes.md"
        # if the tag has a pre-release suffix mark the Github Release accordingly
        if egrep -q "$PRERELEASE_TAG_PATTERN" <<< "$TAG_NAME"; then
          echo "Tag contains a pre-release suffix"
          echo "IS_PRERELEASE=true" >> "$GITHUB_ENV"
        else
          echo "Tag does not contain pre-release suffix"
          echo "IS_PRERELEASE=false" >> "$GITHUB_ENV"
        fi
    - name: Create GitHub release
      id: create_release
      uses: actions/create-release@v1
      env:
        # This token is provided by Actions, you do not need to create your own token
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        body_path: "${{ runner.temp }}/release_notes.md"
        draft: false
        prerelease: ${{ env.IS_PRERELEASE }}
    - name: Build and publish
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        if [ "$IS_PRERELEASE" == true ]; then
          echo "DEBUG: This is a pre-release"
        else
          echo "DEBUG: This is a final release"
        fi
        # use https://github.com/pypa/build for our setup.py-less setup
        pipx run build
        pipx run twine upload dist/*
